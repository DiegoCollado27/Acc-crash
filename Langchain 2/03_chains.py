# -*- coding: utf-8 -*-
"""03 - Chains.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xrP89up-70axeV9Qe99u9AX_Yp9Sm8Qz
"""

# Si no tenemos el módulo instalado

!pip install langchain_openai
!pip install langchain
!pip install tiktoken

"""# Pandas
Pandas es una librería Python que nos facilita mucho la ingestión de datos

# LancgChain Expression Language

LangChain Expression Language (LCEL) es una manera declarativa de componer cadenas fácilmente. Ofrece varias ventajas:

1.   Soporte para sincronización, operaciones en lote y transmisión, facilitando la prototipación y luego la exposición como una interfaz de transmisión asíncrona.
2.   Posibilidad de adjuntar alternativas fácilmente para manejar errores de manera elegante.
3.   Ejecución automática en paralelo de componentes que lo permitan.
4.   Integración sin interrupciones con LangSmith Tracing para máxima observabilidad y depuración durante la ejecución de cadenas complejas
"""

from langchain_openai import ChatOpenAI
from langchain.schema import StrOutputParser
from langchain.prompts import PromptTemplate
from google.colab import userdata


secret_string = userdata.get('OPENAI_TOKEN')
# Configurar el motor de OpenAI
engine = "gpt-4"


llm = ChatOpenAI(temperature=0.7, model=engine, openai_api_key=secret_string)

synopsis_prompt = PromptTemplate.from_template(
    """You are a playwright. Given the title of play, it is your job to write a synopsis for that title.

Title: {title}
Playwright: This is a synopsis for the above play:"""
)

review_prompt = PromptTemplate.from_template(
    """You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play. Provide a title for the review

Play Synopsis:
{synopsis}
Review from a New York Times play critic of the above play:"""
)

llm = ChatOpenAI(openai_api_key=secret_string)
chain = (
    {"synopsis": synopsis_prompt | llm | StrOutputParser()}
    | review_prompt
    | llm
    | StrOutputParser()
)
chain.invoke({"title": "Tragedy at sunset on the beach"})

# Invocando la sinopsis y luego la review
synopsis = synopsis_prompt | llm | StrOutputParser()
user_title = input("Please enter the title of the play: ")
# capturamos output de synopsis e imprimimos
synopsis_output = synopsis.invoke({"title": {user_title}})
print("Synopsis:", synopsis_output)

# Usamos la sinopsis para generar review
review = review_prompt | llm | StrOutputParser()
review_output = review.invoke({"synopsis": synopsis_output})
print(review_output)